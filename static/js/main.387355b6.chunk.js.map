{"version":3,"sources":["assets/image/logo.svg","components/MemoAndUseMemo.jsx","components/WithoutMemoAndUseMemo.jsx","App.js","index.js"],"names":["module","exports","MyButton","text","handlerChangedCount","console","log","className","onClick","MemorizedButton","React","memo","props","MemoAndUseMemo","useState","count","setCount","limit","setLimit","changedCount","arrayNumer","useMemo","filter","x","src","logo","alt","type","onChange","e","target","value","map","idx","key","WithoutMemoAndUseMemo","App","toggle","setToggle","ReactDOM","render","document","getElementById"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,kLCerCC,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBAExB,OADAC,QAAQC,IAAI,+BAEV,4BACEC,UAAU,UACVC,QAASJ,GAERD,IAKDM,EAAkBC,IAAMC,MAAK,SAACC,GAAD,OAAW,kBAAC,EAAaA,MAAW,kBAAM,KAsE9DC,MApEf,WAA2B,IAAD,EACEC,mBAAS,GADX,mBACjBC,EADiB,KACVC,EADU,OAEEF,mBAAS,GAFX,mBAEjBG,EAFiB,KAEVC,EAFU,KAIlBd,EAAsB,SAAAe,GAAY,OAAI,kBAAMH,EAASG,KACrDC,EAAaC,mBAAQ,WAMzB,MALgB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACXC,QAAO,SAAAC,GAE9B,OADAlB,QAAQC,IAAI,0BACLiB,EAAIN,OAGZ,CAACA,IAEJ,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,6DAGA,yBACEiB,IAAKC,IACLlB,UAAU,WACVmB,IAAI,SAEN,uCACWX,GAEX,yBAAKR,UAAU,qBACb,kBAACE,EAAD,CACEN,KAAK,YACLC,oBAAqBA,GAAoB,SAAAW,GAAK,OAAIA,EAAQ,OAE5D,kBAACN,EAAD,CACEN,KAAK,YACLC,oBAAqBA,GAAoB,SAAAW,GAAK,OAAIA,EAAQ,QAW9D,yBAAKR,UAAU,0BACb,gDAGA,2BACEA,UAAU,cACVoB,KAAK,SACLC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,UAEnC,8CAEIX,EAAWY,KAAI,SAACT,EAAGU,GAAJ,OACb,0BAAMC,IAAKD,EAAK1B,UAAU,UAAUgB,EAApC,cCpFVrB,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBAExB,OADAC,QAAQC,IAAI,kCAEV,4BAAQC,UAAU,UAAUC,QAASJ,GAClCD,IA2DQgC,MAtDf,WACE,IAD+B,EAELrB,mBAAS,GAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,OAGLF,mBAAS,GAHJ,mBAGxBG,EAHwB,KAGjBC,EAHiB,KAKzBE,EAJU,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAITE,QAAO,SAAAC,GAE9B,OADAlB,QAAQC,IAAI,6BACLiB,EAAIN,KAGTb,EAAsB,SAAAe,GAAY,OAAI,kBAAMH,EAASG,KAE3D,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,gEAGA,yBACEiB,IAAKC,IACLlB,UAAU,WACVmB,IAAI,SAEN,uCACWX,GAEX,yBAAKR,UAAU,qBACb,kBAAC,EAAD,CACEJ,KAAK,YACLC,oBAAqBA,GAAoB,SAAAW,GAAK,OAAIA,EAAQ,OAE5D,kBAAC,EAAD,CACEZ,KAAK,YACLC,oBAAqBA,GAAoB,SAAAW,GAAK,OAAIA,EAAQ,QAG9D,yBAAKR,UAAU,0BACb,gDAGA,2BACEA,UAAU,cACVoB,KAAK,SACLC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,UAEnC,8CACkBX,EAAWY,KAAI,SAACT,EAAGU,GAAJ,OAAY,0BAAMC,IAAKD,EAAK1B,UAAU,UAAUgB,EAApC,c,MChCxCa,MApBf,WAAgB,IAAD,EACetB,oBAAS,GADxB,mBACNuB,EADM,KACEC,EADF,KAIb,OACE,6BACE,yBAAK/B,UAAU,2BACb,4BACEA,UAAU,gBACVC,QAAS,kBAAM8B,GAAWD,KAF5B,uBAOU,IAAXA,GAAmB,kBAAC,EAAD,OACR,IAAXA,GAAoB,kBAAC,EAAD,QChB3BE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.387355b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useMemo } from 'react';\nimport logo from '../assets/image/logo.svg';\n\n// const MemorizedMyButton = React.memo(({ text, handlerChangedCount }) => {\n//   console.log(MyButton rerender with memo');\n//   return (\n//     <button className=\"buttons\" onClick={handlerChangedCount}>\n//       { text }\n//     </button>\n//   )\n// }, (prev, next) => {\n//   if(prev.text === next.text) return true;\n//   return false;\n// });\n\nconst MyButton = ({ text, handlerChangedCount }) => {\n  console.log('MyButton rerender with memo');\n  return (\n    <button\n      className=\"buttons\"\n      onClick={handlerChangedCount}\n    >\n      {text}\n    </button>\n  )\n}\n\nconst MemorizedButton = React.memo((props) => <MyButton {...props} />, () => true)\n\nfunction MemoAndUseMemo() {\n  const [count, setCount] = useState(0);\n  const [limit, setLimit] = useState(5);\n\n  const handlerChangedCount = changedCount => () => setCount(changedCount);\n  const arrayNumer = useMemo(() => {\n    const numbers = [5, 10, 15, 20, 25, 30]\n    const filtered = numbers.filter(x => {\n      console.log('iteration with useMemo')\n      return x > limit\n    })\n    return filtered;\n  }, [limit]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Counter with memo and useMemo\n        </h1>\n        <img\n          src={logo}\n          className=\"App-logo\"\n          alt=\"logo\"\n        />\n        <div>\n          Count: { count }\n        </div>\n        <div className=\"container-buttons\">\n          <MemorizedButton\n            text=\"Increment\"\n            handlerChangedCount={handlerChangedCount(count => count + 1)}\n          />\n          <MemorizedButton\n            text=\"Decrement\"\n            handlerChangedCount={handlerChangedCount(count => count - 1)}\n          />\n          {/* <MemorizedMyButton\n            text=\"Increment\"\n            handlerChangedCount={handlerChangedCount(count => count + 1)}\n          />\n          <MemorizedMyButton\n            text=\"Decrement\"\n            handlerChangedCount={handlerChangedCount(count => count -1)}\n          /> */}\n        </div>\n        <div className=\"container-array-number\">\n          <label>\n            Filter input:\n          </label>\n          <input\n            className=\"input-limit\"\n            type=\"number\"\n            onChange={e => setLimit(e.target.value)}\n          />\n          <div>\n            Array Number: {\n              arrayNumer.map((x, idx) => (\n                <span key={idx} className=\"number\">{x}, </span>\n              ))\n            }\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default MemoAndUseMemo;\n","import React, { useState } from 'react';\nimport logo from '../assets/image/logo.svg';\n\nconst MyButton = ({ text, handlerChangedCount }) => {\n  console.log('MyButton rerender without memo');\n  return (\n    <button className=\"buttons\" onClick={handlerChangedCount}>\n      {text}\n    </button>\n  )\n}\n\nfunction WithoutMemoAndUseMemo() {\n  const numbers = [5, 10, 15, 20, 25, 30];\n  const [count, setCount] = useState(0);\n  const [limit, setLimit] = useState(5);\n\n  const arrayNumer = numbers.filter(x => {\n      console.log('iteration without useMemo')\n      return x > limit\n    })\n\n  const handlerChangedCount = changedCount => () => setCount(changedCount);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Counter without memo and useMemo\n        </h1>\n        <img\n          src={logo}\n          className=\"App-logo\"\n          alt=\"logo\"\n        />\n        <div>\n          Count: { count }\n        </div>\n        <div className=\"container-buttons\">\n          <MyButton\n            text=\"Increment\"\n            handlerChangedCount={handlerChangedCount(count => count + 1)}\n          />\n          <MyButton\n            text=\"Decrement\"\n            handlerChangedCount={handlerChangedCount(count => count - 1)}\n          />\n        </div>\n        <div className=\"container-array-number\">\n          <label>\n            Filter input:\n          </label>\n          <input\n            className=\"input-limit\"\n            type=\"number\"\n            onChange={e => setLimit(e.target.value)}\n          />\n          <div>\n            Array Number: { arrayNumer.map((x, idx) => <span key={idx} className=\"number\">{x}, </span>) }\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default WithoutMemoAndUseMemo;\n","import React, { useState } from 'react';\nimport MemoAndUseMemo from './components/MemoAndUseMemo';\nimport WithoutMemoAndUseMemo from './components/WithoutMemoAndUseMemo';\nimport './assets/style/App.css';\n\n\nfunction App() {\n  const [toggle, setToggle] = useState(false);\n\n\n  return (\n    <div>\n      <div className=\"container-toogle-button\">\n        <button\n          className=\"toogle-button\"\n          onClick={() => setToggle(!toggle)}\n        >\n          Toggle Components\n        </button>\n      </div>\n      {toggle === true && <MemoAndUseMemo />}\n      {toggle === false && <WithoutMemoAndUseMemo />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/style/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}